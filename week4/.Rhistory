x<-rnorm(100)
y<-rnorm(100)
z<-rnorm(100)
cor.test(data.frame(x,y,z))
args(cor.test)
df<-data.frame(x,y,z)
cor.test(df)
cor(df)
summary(cor(df))
cor(df)
cor.test(x,y)
mat<-matrix(df)
mat
mat<-as.matrix(df)
mat
head(df)
cor(mat)
cor.test(mat)
install.packages('swirl')
library(swirl)
y<-c(1.5,"abc")
y
y<-data.frame(a=1,b="a")
dput(y)
y
library(swirl)
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
Type seq_along(my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect[num_vect<1]
tf<-num_vect<1
tf
num_vect >= 6
my_char<-c("My", "name", "is")
print(my_char)
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Michalis")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
ect <- c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)<-cnames
myData
rm(list=ls())
x<-c("a","b","c","d")
for(i in seq_along(x)){print(x[i])}
?arguments
add2<- function (x,y){x+y}
add2(1,4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
columnmean(airquality)
source('~/.active-rstudio-document', echo=TRUE)
columnmean(airquality)
search()
source('~/.active-rstudio-document')
make.power(3)
cube<-make.power(3)
cube(2)
2*2*2
ls(environment(cube))
get("n",environment(cube))
source('~/.active-rstudio-document')
makeVector(c(1,45,89,5))
mVec<-makeVector(c(1,45,89,5))
mVec(c(2,46,90,6))
mVec
mVec<-makeVector(7)
mVec
x<-8
class(x)
makeVector(1:5)
rm(list=ls())
source('~/.active-rstudio-document')
makeVector(1:4)
Vic<-makeVector(1:10)
Vic(1:10)
ls(environment(makeVector))
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
args(makeVector)
makeVector("c")
makeVector(1)
makeVector(1,2,3,4)
makeVector(c(0,1,-1))
makeVector(x=c(0,1,-1))
y<-1:10
makeVector(11:20)
makeVector(1:10)
y
makeVector(1)
?solve
makeVector()
source('~/InternetCourses/specialization/2.R_Programming/QA/week2/functions.R', echo=TRUE)
mv<makeVector(rnorm(10))
mv<-makeVector(rnorm(10))
mv$get()
mv$set()
mv$getmean()
mv$setmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(mv)
cachemean(mv)
mv$getmean()
mv$setmean()
mv
mv$get()
der<-matrix(rnorm(16),4)
der
solve(der)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getmean <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(inv)
inv
}
mcm<-makeCacheMatrix(matrix(rnorm(14),4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(inv)
inv
}
mcm<-makeCacheMatrix(matrix(rnorm(16),4))
mcm$get()
cacheSolve(mcm)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(mcm)
cacheSolve(mcm)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?parent.frame
setwd("~/InternetCourses/specialization/2.R_Programming/QA/week4")
source('~/InternetCourses/specialization/2.R_Programming/QA/week4/rankall.R', echo=TRUE)
> head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
str(rankall("pneumonia", "worst"))
str(rankall("pneumonia", 20))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
rm(list=ls())
set.seed(1)
rpois(5, 2)
?Rprof
x1<-rnorm(100)
x2<-rnorm(100)
y<-rnorm(100)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
